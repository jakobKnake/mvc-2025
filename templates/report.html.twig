{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="redovisningar">
        <h1>Redovisningstexter</h1>
        <div class="kursmoment" id="kmom01">
            <h2>Kmom01</h2>
            <p>Mina förkunskaper och tidigare erfarenheter till objektorientering är 
            från den tidigare kursen 'oopython'. Där fick vi lära oss om objektorienterad 
            programmering i python. Tyckte den kursen var rolig och lärorik så jag ser 
            fram emot denna kurs också.</p>
            <p>Klasser är som en mall som definierar egenskaper (properties) och metoder, 
            alltså funktioner för den klassen. Ett objekt är en instans av en klass. 
            $this är som 'self' i oopython. Du behöver ange om en egenskap är publik, 
            privat eller protected för att man ska veta vart man kan ha åtkomst av dem. 
            Det kallas för inkapsling. Även metoderna anges om de är publika eller privata. 
            När man skapar en instas av klassen, ett objekt, så används 'new'. Konstruktorn är 
            en metod som körs automatiskt när man skapar ett objekt, där sätter man de värden 
            som hör till klassen som definierades i konstruktorn.</p>
            <p>Jag uppfattar strukturen som ganska lik från tidigare kurser där man tydligt 
            delar upp koden i olika mappar. 'src/Controller' innehåller klasserna som i tidigare 
            kurser men här definieras även routerna. I övningen kändes det som väldigt många olika 
            mappar och filer och en del rörigt men det klarnar nog till sig längre in i kursen. 
            Men jämfört med tidigare kurser så känns det som väldigt mycket fler filer att hålla koll på.</p>
            <p>Det område som direkt tilltalar mig och som jag tycker är mest intressant är 'Security'. 
            Dels på grund av att jag tidigare i livet gått en termin i Cyber Security i Australien 
            men också på grund av den osäkerhet som finns på webben ju mer vi går framåt i utveckling. 
            Även på grund av den nutida osäkerheten i världen där jag tror att IT-säkerhet verkligen 
            behövs prata mer om.<br>
            Andra områden jag skulle vilja lära mig mer om är 'Code Style' då jag känner att jag 
            verkligen skulle behöva utveckla mig i det. Att skriva ren och 'korrekt' kod för att 
            förtydliga för mig själv i framtida projekt men även underlätta för andra som ska sätta 
            sig in i min kod. Även att dokumentera min kod behöver jag bli mycket bättre på så den 
            delen känns nödvändig.</p>
            <p>Min TIL för detta kursmoment är att arbeta med Symfony och hur klasser fungerar i PHP. 
            Det skiljer sig lite mot Python men ändå inte. Även hur man skriver en README och varför 
            det används. Tidigare har jag inte riktigt brytt mig om den filen.</p>
        </div>
        <div class="kursmoment" id="kmom02">
            <h2>Kmom02</h2>
            <p>Arv, en klass kan ärva från en annan klass. Med att ärva menas att den klass som ärver, 
            ärver då den andre klassens metoder och egenskaper. Den klass som ärver kan även utöka/överskriva 
            den andra klassens metoder. Basklassen, även kallat superklassen(parent::) är den klass man ärver ifrån, 
            den andra kallas för subklass.<br>
            Komposition är en typ av relation mellan två klasser. En komposition är en 'has-a' relation och det är en 
            stark relation mellan klasserna. Som exempel så om CardHand förstörs så förstörs Card, alltså korten ägs av 
            handen.<br>
            En klass kan använda trait och flera trait. Trait är kod som kan återanvändas av den klass som använder den. 
            Så en klass kan återanvända trait-koden utan arv.<br>
            Interface är ett kontrakt som definierar vilka metoder en klass måste ha. Kontraktet, Interfacet berättar 
            bara vad en klass ska göra men inte hur.</p>
            <p>Uppgiften i detta kursmoment är jag nöjd med. Jag återanvände mycket kod ifrån övningen med pig 
            spelet så att skapa hand-klassen och kort-klasserna tog inte så lång tid. Kravet med att dra ett 
            kort och flera kort missförstod jag lite till en början. Jag blandade ihop det med kravet i JSON 
            API där draw/:number skulle vara post därav blev det en route som hanterar 2 olika formulär. Jag 
            fick då vara flexibel i drawCard-metoden så att den kan ta ett argument som på default är satt till 
            null. Till nästa vecka ska jag uppdatera både metoden så den hanterar nullvärdet och 1 draget kort på samma sätt.<br>
            Efter att ha fått feedback från förra kursmomentet och läst igenom den så valde jag att utmana mig själv. 
            Jag valde alltså att lära mig hantera ramverket Tailwind. Aldrig arbetat med det innan och egentligen har 
            jag knappt använt mig utav CSS ramverk tidigare. Väldigt lite bootstrap i oopython kursen och just därför 
            valde jag att testa på ett helt nytt ramverk. Enkelt att följa deras dokumentation i hur man installerar 
            det i Symfony, alla config-filer med mera. Jag har inte hunnit byta ut all tidigare CSS från kmom01 men en del. 
            Just för att jag är helt ny i detta så tog designen otroligt lång tid och herregud vad svårt det var att 
            stylea unicode-korten men till slut lyckades det bli snyggt (enligt mig). Så designen är jag nöjd med, 
            min strukturering av koden är jag nöjd med och de metoder som jag implementerat är jag också nöjd med då de 
            fungerar för kraven i detta kursmoment. Till senare del i kursen behövs fler metoder läggas in men det tar 
            jag då. Jag skulle kunna lagt till en återställnings-metod i kortleks-klassen men än så länge funkar det att 
            bara återställa sessionen istället. Jag skulle även kunna hantera sessionerna bättre och lägga till kontroller 
            på dom, ifall dom är tomma till exempel och isåfall skapa nya objekt. Men överlag är jag nöjd med min 
            inlämning och extra nöjd med designen över hela sidan eftersom det tog otroligt lång tid att ändra och testa 
            på nya syntaxen för Tailwind.</p>
            <p>Så här långt går det bra att jobba i Symfony. Tycker att materialet som erbjuds är lärande och de länkar 
            som finns att klicka sig vidare på är väldigt givande. Tänkte testa på att skapa och arbeta med formulär med 
            Symfonys inbyggda sätt men jag känner att jag måste hinna med den andra kursen också. Nu i detta kursmoment 
            har det klarnat mer med Model, View och Controller och hur de används för det kändes väldigt rörigt i början 
            när man precis satte upp sitt projekt med Symfony. Det känns som Symfony erbjuder en del builtIn funktioner 
            som hade vart coolt att få lära sig men det känns lite tungt att försöka på det helt själv nu mitt i kursen. 
            Som deras formulär som jag nämnde tidigare. Får väl skapa några egna projekt över sommaren för att testa på.</p>
            <p>Min TIL för detta kursmoment är framförallt Tailwind CSS men även hur man skriver och tar in parametrar i URL 
            på detta sätt({number<\d+>}). Jag håller även på att lära mig skriva bättre commit meddelanden och tagga rätt. 
            Inser nu när jag kollar min logg att jag taggat lite fel på vissa ställen men framöver ska jag bli bättre på 
            det. Men tycker ändå att jag pushat på rätt sätt om man kan säga så.</p>
        </div>
        <div class="kursmoment" id="kmom03">
            <h2>Kmom03</h2>
            <p>Jag har tidigare använt mig av flödesdiagram och psuedokod, på komvux programmering 1. 
            Jag tycker framförallt att psuedokod stödjer mig i problemlösningen. Även om man inte följer 
            den fullt ut och man kanske kommer på andra tillvägagångssätt under tiden man kodar så är 
            den ett bra stöd.<br>
            Att modellera Black Jack spelet med flödesdiagram och psuedokod fick mig att tänka igenom 
            spelets regler och flow. I flödesdiagrammet fick man det visualiserat vad som behöver processas 
            och den gjorde det enkelt att se hur min funktion för att ta fram vinnaren skulle gå till.</p>
            <p>Jag löste uppgiften genom att kolla en del på tidigare kod från 'oopython' kursen. Så jag 
            strukturerade på ett liknande sätt som då med en klass för spelets regler och en klass som hanterar 
            flödet under spelets gång. Jag valde att bygga upp mina klasser för fler spelare men på grund av 
            tidsbrist så valde jag att hårdkoda 1 spelare. Så för att förbättra mitt spel så kan jag bara ta 
            bort player[0] (som jag har på vissa metoder) och köra med ett index i parametern för att på så 
            sätt möjliggöra flerspelarläge. Det behövs även lägga till metoder för att se vems tur det är m.m 
            som jag inte kände att jag hade tid att göra. Jag valde att testa på 'Interface' och 'Trait' till 
            min player klass och spellogik-klassen. Tycker att användningen av ett trait och interface var väldigt 
            smidigt. Så klart kan jag förbättra dem till nästa gång men det kändes som en bra möjlighet att testa 
            på. Jag skulle även vilja lägga till någon typ av animation till designen på spelet för att skapa en 
            snyggare övergång när ett kort dras. Sen såklart saknas ju möjligheten att få splitta sin hand. 
            Får försöka lägga till den vid senare tillfälle. Men överlag är jag nöjd med uppgiften, försökte 
            skapa en känsla av ett sämre online casino.</p>
            <p>Jag tycker att det blir klarare och klarare. I början kändes allt rörigt men nu går det bra. 
            Har dock fortfarande lite svårt att hålla koll på alla konfig filer och jag får fortfarande inte till d
            et med felmeddelandet att tailwindcss inte kunde hittas. Dock funkar det ändå så jag rör inget förens jag måste.</p>
            <p>Min TIL för detta kursmoment är användningen av Interface och Trait utöver guiden. 
            Tycker även att verktygen från övningen hjälpte och det fick mig att tänka på hur jag skriver min kod. 
            Jag tycker att jag börjat skriva snyggare kod men det kommer bli snyggare.</p>
        </div>
        <div class="kursmoment" id="kmom04">
            <h2>Kmom04</h2>
            <p>Jag tyckte att det påminde om testerna vi skrev i 'oopython'. Att skriva tester som testar 
            annan kod tycker jag hjälper mig i hur jag ska skriva bättre kod. Jag satt och funderade på om 
            jag i framtiden skulle köra på att skriva testerna först innan jag skriver den faktiska koden. 
            Sen göra phpunit som en watcher, likt den man kör med 'npm run --watch'. Kanske inte funkar? 
            Får testa när jag har tid isåfall men rent allmänt tycker inte det var så svårt med phpunit. 
            Bra med dokumentationen som var tydlig då jag använde den när jag behövde se hur man använder 
            sig utav mock.</p>
            <p>Jag lyckades med 100% kodtäckning. Tyckte det var riktigt bra med coverage för att visualisera 
            tydligare vad som är gjort och vad som är kvar. Blir som en slags checklista som ger en positiv 
            feedback i form av grön färg när man lyckas/blir klar. Jag testade inte på att skapa tester för 
            mina controllers men det kommer väl senare. Är inne på att börja med att skriva tester innan jag 
            börjar koda men det känns inte riktigt som att tid finns för det i till exempel ett slutprojekt.</p>
            <p>Jag tycker min egen kod är testbar. Vissa delar mer än andra men jag måste bli bättre på exceptions 
            hanteringen och på så sätt kunna testa det också. Sen hade jag delar i koden som blir svår att testa 
            då jag hade hårdkodat 1 spelare i vissa av metoderna. Det hade jag kunnat ändra på och då kunna testa 
            att rätt spelare spelar sin tur men då hade jag även behövt lägga till fler metoder såsom att hitta 
            index för spelaren.</p>
            <p>Jag tror det blir renare och snyggare kod om man skriver testbar kod. Tydligheten som dyker upp när 
            man börjar skriva tester och man får liksom andra ögon när man då kollar på sin egen kod. Om jag lär 
            mig skriva mer testbar kod tror jag att min kod kommer bli renare.</p>
            <p>Min TIL för detta kursmoment var phpunit. Enhetstesta i php med mock var även det nytt för mig.</p>
        </div>
        <div class="kursmoment" id="kmom05">
            <h2>Kmom05</h2>
            <p>Här visas redovsningstext för kursmomentet</p>
        </div>
        <div class="kursmoment" id="kmom06">
            <h2>Kmom06</h2>
            <p>Här visas redovsningstext för kursmomentet</p>
        </div>
        <div class="kursmoment" id="kmom10">
            <h2>Kmom10</h2>
            <p>Här visas redovsningstext för kursmomentet</p>
        </div>
    </div>


{% endblock %}